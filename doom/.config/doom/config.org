#+TITLE: Emacs Configuration

* TODO Table of Contents

* Lexical binding
Turn on lexical binding for the init file
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Load custom elisp
Add $DOOM_HOME/elisp to load path and require files
#+begin_src emacs-lisp
  (add-load-path! (expand-file-name "elisp" doom-user-dir))
  (require 'custom-defuns)
#+end_src
* Personal information
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "Adam Nord"
      user-mail-address "adam.nord04@gmail.com")
#+end_src
* Styling
** User Interface
Clean up Emacs’ user interface, make it more minimal.

#+begin_src emacs-lisp
  (setq default-frame-alist '((undecorated . t)))
  (scroll-bar-mode -1)
#+end_src
** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "SF Pro Text" :size 15 :weight 'medium)
      doom-big-font (font-spec :family "SF Pro Text" :size 20 :weight 'bold))
#+end_src

** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
#+end_src

* Settings
** Auto revert
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** Line numbers
Sets line-numbers to relative and disables for org-mode
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** Scroll margin
#+begin_src emacs-lisp
(setq scroll-margin 6)
#+end_src

** TODO Indentation
Set tab width to two and use spaces instead of tabs
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
(setq-default indent-tabs-mode nil)
#+end_src

** Even window sizes
Don't try to use even window sizes
#+begin_src emacs-lisp
(setq even-window-sizes nil)
#+end_src

* Keybinds
** Leader keybinds
#+begin_src emacs-lisp
(map! :leader
      :desc "Eval line or region"   "e" #'+eval/line-or-region
      :desc "Search minor modes"    "sM" #'consult-minor-mode-menu
      :desc "Browse private config" "fp" #'doom/open-private-config
      :desc "Open config.org"       "fP" #'custom/goto-config-org)
#+end_src

** Other keybinds
#+begin_src emacs-lisp
  (map!
   :map text-mode-map
   "C-s" #'save-buffer
   "C-f" #'consult-line)
#+end_src
** Org
#+begin_src emacs-lisp
  (map!
   :map org-src-mode-map
   "C-s" #'org-edit-src-exit
   "C-g" #'org-edit-src-abort)
#+end_src

* Evil
** Evil configuration
Don't yank when pasting over something
#+begin_src emacs-lisp
(after! evil
  (setq evil-kill-on-visual-paste nil))
#+end_src

** Evil keybinds
Keybinds specific to evil mode
#+begin_src emacs-lisp
  (map!
   :v "J" #'drag-stuff-down
   :v "K" #'drag-stuff-up
   :m "C-f" nil)
#+end_src

** Add yank highlight
Highlight temporarily on yank
#+begin_src emacs-lisp
(defun custom/evil-yank-advice (orig-fn beg end &rest args)
  (pulse-momentary-highlight-region beg end)
  (apply orig-fn beg end args))

(advice-add 'evil-yank :around #'custom/evil-yank-advice)
#+end_src

* Org
** Configuration
#+begin_src emacs-lisp
  (defun custom/setup-org ()
    (mixed-pitch-mode 1)
    (display-line-numbers-mode -1)
    (vi-tilde-fringe-mode -1))

  ;; TODO check out flycheck error
  (use-package! org
    :hook (org-mode . custom/setup-org)
    :config
    ;; Do not fix src blocks to left
    (setq org-src-preserve-indentation nil)
    ;; White title with 1.9 height
    ;; (set-face-attribute 'org-document-title nil :foreground "#ffffff" :font "SF Pro Text" :weight 'bold :height 1.9)
    ;; Set heading sizes
    ;; (dolist (face '((org-level-1 . 1.2)
    ;;                 (org-level-2 . 1.1)
    ;;                 (org-level-3 . 1.1)
    ;;                 (org-level-4 . 1.0)
    ;;                 (org-level-5 . 1.1)
    ;;                 (org-level-6 . 1.1)
    ;;                 (org-level-7 . 1.1)
    ;;                 (org-level-8 . 1.1)))
    ;;   (set-face-attribute (car face) nil :font "SF Pro Text" :weight 'semibold :height (cdr face)))
  )
#+end_src
** Set directory
Set org directory
#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-roam-directory "~/org/roam/")
#+end_src

** TODO Superstar
Pretty mode module config
#+begin_src emacs-lisp
  (after! org-superstar
  (setq org-superstar-headline-bullets-list '("◉" "○")))
#+end_src

* LSP
#+begin_src emacs-lisp
(after! lsp
  (setq lsp-eslint-auto-fix-on-save t))
#+end_src
* Web mode
#+begin_src emacs-lisp
(after! web-mode
  (setq-default web-mode-script-padding 0
                web-mode-block-padding 0
                web-mode-part-padding 0
                web-mode-style-padding 0))
#+end_src
* Ranger
#+begin_src emacs-lisp
  (use-package! ranger
  :config
  (setq ranger-override-dired 'ranger))
  ;; (setq dired))
#+end_src
** Ranger-go
#+begin_src emacs-lisp
  (advice-add 'ranger-go :override #'custom/ranger-go)
#+end_src
* Corfu
** Default face
#+begin_src emacs-lisp
  (use-package! corfu
    :config
    (setq corfu-preview-current nil)
    (set-face-attribute 'corfu-default nil :family "JetBrains Mono")
    (set-face-attribute 'corfu-current nil :family "JetBrains Mono"))
#+end_src
** Override escape
#+begin_src emacs-lisp
  (defvar my-override-keymap-alist '()) (add-to-ordered-list
                                         'emulation-mode-map-alists 'my-override-keymap-alist 0)

  (add-hook 'my-override-keymap-alist `(completion-in-region-mode .
                                        ,(define-keymap "<escape>"
                                        #'evil-collection-corfu-quit-and-escape)))
#+end_src
* Flycheck
#+begin_src emacs-lisp
  (use-package! eglot
    :config
    (add-to-list 'eglot-server-programs
                 '(web-mode . (eglot-volar "vue-language-server" "--stdio"))))

  (defclass eglot-volar (eglot-lsp-server) ()
    :documentation "A custom class for volar")
  (cl-defmethod eglot-initialization-options ((server eglot-volar))
    "Passes through required volar initialization options"
    (let*
        ((serverPath "/home/adam/.local/share/pnpm/global/5/.pnpm/typescript@5.0.4/node_modules/typescript/lib/tsserverlibrary.js"))
      (list :typescript
            (list :tsdk serverPath)
            :languageFeatures
            (list :completion
                  (list :defaultTagNameCase ""
                        :defaultAttrNameCase "kebabCase"
                        :getDocumentNameCasesRequest nil
                        :getDocumentSelectionRequest nil)
                  :diagnostics
                  (list :getDocumentVersionRequest nil))
            :documentFeatures
            (list :documentFormatting
                  (list :defaultPrintWidth 100
                        :getDocumentPrintWidthRequest nil)
                  :documentSymbol t
                  :documentColor t))))
#+end_src
