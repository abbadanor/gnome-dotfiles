#+TITLE: Emacs Configuration

* TODO Table of Contents

* Lexical binding
Turn on lexical binding for the init file
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Personal information
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "Adam Nord"
      user-mail-address "adam.nord04@gmail.com")
#+end_src
* Styling
** User Interface
Clean up Emacsâ€™ user interface, make it more minimal.

#+begin_src emacs-lisp
(setq default-frame-alist '((undecorated . t)))
#+end_src
** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "SF Pro Text" :size 15 :weight 'medium)
      doom-big-font (font-spec :family "SF Pro Text" :size 20 :weight 'bold))
#+end_src

** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
#+end_src

* Settings
** Auto revert
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** Line numbers
Sets line-numbers to relative and disables for org-mode
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** Scroll margin
#+begin_src emacs-lisp
(setq scroll-margin 6)
#+end_src

** TODO Indentation
Set tab width to two and use spaces instead of tabs
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
(setq-default indent-tabs-mode nil)
#+end_src

** Even window sizes
Don't try to use even window sizes
#+begin_src emacs-lisp
(setq even-window-sizes nil)
#+end_src

* Keybinds
** Leader keybinds
#+begin_src emacs-lisp
(map! :leader
  :desc "Eval line or region" "e" #'+eval/line-or-region
  :desc "Search org headings" "sh" #'consult-org-heading)
#+end_src

** Other keybinds
#+begin_src emacs-lisp
(map!
  :nv "C-s" #'save-buffer
  :nv "C-f" #'consult-line)
#+end_src

* Evil
** Evil configuration
Don't yank when pasting over something
#+begin_src emacs-lisp
(after! evil
  (setq evil-kill-on-visual-paste nil))
#+end_src

** Evil keybinds
Keybinds specific to evil mode
#+begin_src emacs-lisp
(map!
 :i "C-g"  #'evil-normal-state
 :v "J" #'drag-stuff-down
 :v "K" #'drag-stuff-up
 :m "C-f" nil)
#+end_src

** Add yank highlight
Highlight temporarily on yank
#+begin_src emacs-lisp
(defun an/evil-yank-advice (orig-fn beg end &rest args)
  (pulse-momentary-highlight-region beg end)
  (apply orig-fn beg end args))

(advice-add 'evil-yank :around #'an/evil-yank-advice)
#+end_src

* Org
** Hooks
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (display-line-numbers-mode 0)))
(add-hook 'org-mode-hook (lambda () (vi-tilde-fringe-mode -1)))
#+end_src
** Header sizes
#+begin_src emacs-lisp
(use-package! org
  :hook (org-mode . mixed-pitch-mode)
  :config
  (set-face-attribute 'org-document-title nil :font "SF Pro Text" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "SF Pro Text" :weight 'medium :height (cdr face))))
#+end_src
** Set directory
Set org directory
#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-roam-directory "~/org/roam/")
#+end_src
* LSP
#+begin_src emacs-lisp
(after! lsp
  (setq lsp-eslint-auto-fix-on-save t))
#+end_src
* Web mode
#+begin_src emacs-lisp
(after! web-mode
  (setq-default web-mode-script-padding 0
                web-mode-block-padding 0
                web-mode-part-padding 0
                web-mode-style-padding 0))
#+end_src
